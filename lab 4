import tensorflow as tf
# tensorflow를 불러온다
import numpy as np
# numpy를 불러온다.

tf.enable_eager_execution()
tf.__version__

# Random
tf.set_random_seed(0) # for reproductubility random_seed를 리셋하고 다시 해도 똑같이 보이게 한다
# data and label
x1 = [ 73.,  93.,  89.,  96.,  73.] 
x2 = [ 80.,  88.,  91.,  98.,  66.]
x3 = [ 75.,  93.,  90., 100.,  70.]
Y  = [152., 185., 180., 196., 142.]
# x, y이다.
# random weights
w1 = tf.Variable(tf.random_normal([1]))    
w2 = tf.Variable(tf.random_normal([1])) 
w3 = tf.Variable(tf.random_normal([1]))
b  = tf.Variable(tf.random_normal([1]))
# 초기값을 1로 정의(아무거나 상관 없다), x데이터가 3개니까 weight도 3개이다.

learning_rate = 0.000001               
 # learning_rate는 작은값으로 정함.

for i in range(1000+1): 
# 업데이트 1001번 함.
    # tf.GradientTape() to record the gradient of the cost function
    with tf.GradientTape() as tape:      
#GradientTape 사용. 아래 변수를 tape에 기록함.
        hypothesis = w1 * x1 +  w2 * x2 + w3 * x3 + b       
 # 가설값 
        cost = tf.reduce_mean(tf.square(hypothesis - Y))     
 # 오차(가설값-실제값)제곱의 평균 값으로 cost를 정의 함.

    # calculates the gradients of the cost
    w1_grad, w2_grad, w3_grad, b_grad = tape.gradient(cost, [w1, w2, w3, b]) 
# 변수들의 기울기 구함. 기울기 값은 각각 w1_grad, w2_grad, w3_grad, b_grad..
.
    
    # update w1,w2,w3 and b
    w1.assign_sub(learning_rate * w1_grad) 
w2.assign_sub(learning_rate * w2_grad)
    w3.assign_sub(learning_rate * w3_grad)
    b.assign_sub(learning_rate * b_grad)
      # gradient 값 업데이트 위해 assign_sub를 이용함..
업데이트 시 gradient값에 learning_rate를 곱한 후 그 값을 빼서 함..



    if i % 50 == 0:   
      print("{:5} | {:12.4f}".format(i, cost.numpy()))
      # 50번에 1번씩 출력합니다.
#    i       cost
    0 |   11325.9121
   50 |     135.3618           
  100 |      11.1817
  150 |       9.7940
  200 |       9.7687
  250 |       9.7587
  300 |       9.7489
  350 |       9.7389
  400 |       9.7292
  450 |       9.7194
  500 |       9.7096
  550 |       9.6999
  600 |       9.6903
  650 |       9.6806
  700 |       9.6709
  750 |       9.6612
  800 |       9.6517
  850 |       9.6421
  900 |       9.6325
  950 |       9.6229
 1000 |       9.6134
# 결과 값: i값은 0~100까지 증가. Cost가 큰 값에서 급격히 줄어들면 거의 일정한 결과 값을 확인함.

# Matrix
 data = np.array([
    # X1,   X2,    X3,   y
    [ 73.,  80.,  75., 152. ],
    [ 93.,  88.,  93., 185. ],
    [ 89.,  91.,  90., 180. ],
    [ 96.,  98., 100., 196. ],
    [ 73.,  66.,  70., 142. ]
], dtype=np.float32)
# 메트릭스가 간결한 표현법. 데이터를 열 별로 정리함. 

# slice data
X = data[:, :-1]    
# numpy의 슬라이싱을 활용하여 데이터를 잘라냄. X는 열의 첫번째부터 마지막 열을 제외하고 5행 3열짜리 matrix가 됨.
y = data[:, [-1]]   
# Y는 행은 전체, 열은 마지막부분임.

W = tf.Variable(tf.random_normal([3, 1])) 
# X값 열이 3개여서 행이 3개가 필요함. 출력값은 하나이기 때문에 weight의 행도 하나가 됨.
b = tf.Variable(tf.random_normal([1]))    
# bias는 하나가 됨.

learning_rate = 0.000001           
# learning_rate값을 작은 상수 값으로 지정

# hypothesis, prediction function
def predict(X):         
#우리의 예측함수는 아래와 같이 정의.
    return tf.matmul(X, W) + b  
    # matmul 함. X*w에 b 더함. 


n_epochs = 2000        
for i in range(n_epochs+1):
 # 총 2001회 epochs가 수행함..
    # tf.GradientTape() to record the gradient of the cost function
    with tf.GradientTape() as tape:
        cost = tf.reduce_mean((tf.square(predict(X) - y)))
    #epochs가 2000까지 진행이 되면서 cost가 어떻게 변하는지 출력.

    # calculates the gradients of the loss
    W_grad, b_grad = tape.gradient(cost, [W, b])
    #기울기 값을 구함..

    # updates parameters (W and b)
    W.assign_sub(learning_rate * W_grad
    b.assign_sub(learning_rate * b_grad)
    # W와 b 값을 지속적으로 업데이트..
    if i % 100 == 0:
        print("{:5} | {:10.4f}".format(i, cost.numpy()))
        
epoch | cost
    0 |  5455.5903                         
  100 |    31.7443
  200 |    30.9326
  300 |    30.7894
  400 |    30.6468
  500 |    30.5055
  600 |    30.3644
  700 |    30.2242
  800 |    30.0849
  900 |    29.9463
 1000 |    29.8081
 1100 |    29.6710
 1200 |    29.5348
 1300 |    29.3989
 1400 |    29.2641
 1500 |    29.1299
 1600 |    28.9961
 1700 |    28.8634
 1800 |    28.7313
 1900 |    28.5997
 2000 |    28.4689
# 결과 값: epoch는 2000까지 진행이 되면서 cost는 처음에 큰 값이였음. 급속하게 줄고 이제 줄지 않는 상태가 됨. 
